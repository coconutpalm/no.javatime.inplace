<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:Cambria;
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:10.0pt;
	margin-left:0cm;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
h1
	{mso-style-link:"Heading 1 Char";
	margin-top:24.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Cambria","serif";
	color:#365F91;}
h2
	{mso-style-link:"Heading 2 Char";
	margin-top:10.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:"Cambria","serif";
	color:#4F81BD;}
h3
	{mso-style-link:"Heading 3 Char";
	margin-top:10.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Cambria","serif";
	color:#4F81BD;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:5.0pt;
	margin-left:0cm;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:5.0pt;
	margin-left:11.0pt;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:5.0pt;
	margin-left:22.0pt;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{mso-style-link:"Header Char";
	margin:0cm;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{mso-style-link:"Footer Char";
	margin:0cm;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{mso-style-link:"Title Char";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:15.0pt;
	margin-left:0cm;
	border:none;
	padding:0cm;
	font-size:26.0pt;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
p.MsoTitleCxSpFirst, li.MsoTitleCxSpFirst, div.MsoTitleCxSpFirst
	{mso-style-link:"Title Char";
	margin:0cm;
	margin-bottom:.0001pt;
	border:none;
	padding:0cm;
	font-size:26.0pt;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
p.MsoTitleCxSpMiddle, li.MsoTitleCxSpMiddle, div.MsoTitleCxSpMiddle
	{mso-style-link:"Title Char";
	margin:0cm;
	margin-bottom:.0001pt;
	border:none;
	padding:0cm;
	font-size:26.0pt;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
p.MsoTitleCxSpLast, li.MsoTitleCxSpLast, div.MsoTitleCxSpLast
	{mso-style-link:"Title Char";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:15.0pt;
	margin-left:0cm;
	border:none;
	padding:0cm;
	font-size:26.0pt;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p.MsoAcetate, li.MsoAcetate, div.MsoAcetate
	{mso-style-link:"Balloon Text Char";
	margin:0cm;
	margin-bottom:.0001pt;
	font-size:8.0pt;
	font-family:"Tahoma","sans-serif";}
p.MsoTocHeading, li.MsoTocHeading, div.MsoTocHeading
	{margin-top:24.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Cambria","serif";
	color:#365F91;
	font-weight:bold;}
span.HeaderChar
	{mso-style-name:"Header Char";
	mso-style-link:Header;}
span.FooterChar
	{mso-style-name:"Footer Char";
	mso-style-link:Footer;}
span.Heading1Char
	{mso-style-name:"Heading 1 Char";
	mso-style-link:"Heading 1";
	font-family:"Cambria","serif";
	color:#365F91;
	font-weight:bold;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;}
span.Heading3Char
	{mso-style-name:"Heading 3 Char";
	mso-style-link:"Heading 3";
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;}
span.BalloonTextChar
	{mso-style-name:"Balloon Text Char";
	mso-style-link:"Balloon Text";
	font-family:"Tahoma","sans-serif";}
span.TitleChar
	{mso-style-name:"Title Char";
	mso-style-link:Title;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
.MsoChpDefault
	{font-family:"Calibri","sans-serif";}
.MsoPapDefault
	{margin-bottom:10.0pt;
	line-height:115%;}
 /* Page Definitions */
 @page WordSection1
	{size:595.3pt 841.9pt;
	margin:70.85pt 70.85pt 70.85pt 70.85pt;}
div.WordSection1
	{page:WordSection1;}
-->
</style>

</head>

<body lang=NO-BOK link=blue vlink=purple>

<div class=WordSection1>

<div style='border:none;border-bottom:solid #4F81BD 1.0pt;padding:0cm 0cm 4.0pt 0cm'>

<p class=MsoTitle><a name="_Toc322595073"><span lang=EN-US>Start and stop
Bundles</span></a></p>

</div>

<p class=MsoTocHeading><span lang=EN-US>Contents</span></p>

<p class=MsoToc1><span lang=EN-US><span class=MsoHyperlink><a
href="#_Toc381643668">How to<span style='color:windowtext;display:none;
text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc1><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc381643669">Activating Bundles using the declared activation policy<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc381643670">Lazy Activation<span style='color:windowtext;display:
none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc381643671">Eager Activation<span style='color:windowtext;display:
none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc1><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc381643672">Declared and Runtime Dependencies<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc1><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc381643673">Runtime Implications of starting and stopping Bundles<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoToc2><span class=MsoHyperlink><span lang=EN-US><a
href="#_Toc381643674">Stale References<span style='color:windowtext;display:
none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h1><a name="_Toc381643668"><span lang=EN-US>How to</span></a></h1>

<p class=MsoNormal><span lang=EN-US>A bundle is started when first <a
href="Activate%20and%20Deactivate%20Bundles.htm"
title="Describes how to activate bundles">activated</a> . When activated, you
can then stop and start multiple bundles from the Bundle main menu and individual
bundles from the context pop-up menus from the Package Explorer, Bundle Detail
Page View and the Bundle List Page View.   There are also local tool bars in
the Details and List pages for starting and stopping bundles individually.  </span></p>

<p class=MsoNormal><span lang=EN-US>Note that the Start menu entry and the tool
bar button for a bundle is only available when the bundle is in state RESOLVED
and for the <i>Stop</i> menu entry and the tool bar button when the bundle is
in state ACTIVE or STARTING/&lt;&lt;LAZY&gt;&gt;.</span></p>

<h1><a name="_Toc381643669"></a><a name="_Start_Levels_and"></a><span
lang=EN-US>Activating Bundles using the declared activation policy</span></h1>

<p class=MsoNormal><span lang=EN-US>When activated a bundle is started using the
declared activation policy. For workspace bundles, the activation policy
setting is determined by the Bundle-ActivationPolicy header in the manifest
file which either can be maintained manually or by using the <a
href="Setting%20Bundle%20Options.htm#EagerActivationPolicy">Eager Activation
Policy</a>  and the <a
href="Setting%20Bundle%20Options.htm#SetActivationPolicytoEagerOnActivate">Set
Activation Policy to Eager on Activate</a> options. </span></p>

<h2><a name="_Toc381643670"><span lang=EN-US>Lazy Activation</span></a></h2>

<p class=MsoNormal><span lang=EN-US>When a bundle is activated (and started),
and has declared a lazy activation policy, the bundle enters state
&lt;&lt;LAZY&gt;&gt; (or STARTING). If a lazy activated bundle is stopped and
started again while activated, it alters between state RESOLVED and &lt;&lt;LAZY&gt;&gt;
(or STARTING) respectively. The bundle will enter state ACTIVE the first time
another bundle being started actually uses some capabilities from the lazy
activated bundle.  See <a href="#_Runtime_Implications_of">Runtime Implications
of starting and stopping Bundles</a> for a detailed explanation of bundle
states when starting and stopping lazy activated bundles.</span></p>

<h2><a name="_Toc381643671"><span lang=EN-US>Eager Activation</span></a><span
lang=EN-US>   </span></h2>

<p class=MsoNormal><span lang=EN-US>Bundles with eager activation policy enters
state ACTIVE when first activated (and started) and alters between RESOLVED and
ACTIVE when stopped and started</span></p>

<h1><a name="_Toc381643672"><span lang=EN-US>Declared and Runtime Dependencies</span></a></h1>

<p class=MsoNormal><span lang=EN-US>In principle a bundle that provides
capabilities and/or services to a bundle being started enters state ACTIVE,
independent of the declared activation policy.  </span></p>

<p class=MsoNormal><span lang=EN-US>An exception to this rule is that if a
bundle declares that it require capabilities (depends on) from a lazy activated
 bundle by only importing packages from the providing bundle and actually not creates
any Java objects or use any services from the bundle. In this case the providing
bundle with a lazy activation policy remains in state &lt;&lt;LAZY&gt;&gt; when
the requiring bundle is started. </span></p>

<p class=MsoNormal><span lang=EN-US>The reason for this is that there is a
declared or a static requirement (e.g. in the import header of the requiring
bundle) but at runtime no capabilities are actually used, so the class loader
does not have to be loaded and the bundle remains in state &lt;&lt;LAZY&gt;. </span></p>

<p class=MsoNormal><span lang=EN-US>If bundles that requires capabilities from
a bundle with a declared  eager activation policy are started, the providing eager
declared bundle enters state ACTIVE independent of if there is a runtime
requirement or not.</span></p>

<h1><a name="_Toc381643673"></a><a name="_Runtime_Implications_of"></a><span
lang=EN-US>Runtime Implications of starting and stopping Bundles</span></h1>

<p class=MsoNormal><span lang=EN-US>When a bundle is started or stopped the
start and stop methods of the activator class, if any, of the bundle is invoked.
You can start bundles in state RESOLVED and stop bundles in state ACTIVE and
STARTING/&lt;&lt;LAZY&gt;&gt;. It is also possible to stop and start bundles
with build errors. </span></p>

<p class=MsoNormal><span lang=EN-US>The Framework catches and wraps any
unchecked and checked exceptions thrown in the Start and Stop methods in a
BundleException object, which is then forwarded to the Log View by the InPlace
Activator.</span></p>

<p class=MsoNormal><span lang=EN-US>To try to recover from an exception of type
Error with origin outside a running bundle it is possible to check for interrupts
within the bundle. When trapping an interrupt in the Start or Stop method,
control should return as soon as possible leaving the trapped interrupt flag
intact. Setting the interrupt status is best effort so there is no guarantee
that an interrupt is received in the Start and Stop methods when an exception
of type Error occur. The following test should make it possible to return from
Start or Stop to finish the running thread:</span></p>

<p class=MsoNormal><img border=0 width=301 height=45
src="Start%20and%20Stop%20Bundles_files/image001.png"
alt="if (Thread.interrupted())&#13;&#10;	return;&#13;&#10;"></p>

<p class=MsoNormal><span lang=EN-US>Packages exported by a stopped bundle
continue to be available to other bundles. This continued export implies that
other bundles can execute code from a stopped bundle, and thus the classes are
not unloaded when the bundle is stopped. If the bundle is started again the
start method in the already loaded activator class is invoked.</span></p>

<p class=MsoNormal><span lang=EN-US>If the bundle that is being started again after
being stopped has a lazy activation policy it will enter state STARTING and not
ACTIVE despite that its classes are loaded. The reason for this is that no
class loading is performed when an already started bundle in state ACTIVE is
started the second time after being stopped.  Bundles with a lazy activation
policy only enter state ACTIVE when their classes are loaded on demand from
other bundles being started. If the lazy activated bundle and its requiring
bundle(s) is refreshed - instead of stopped and started - its classes will be
reloaded and the lazy activated bundle will enter state ACTIVE.   </span></p>

<p class=MsoNormal><span lang=EN-US>An example of this is when a plug-in that
defines a contributing extension is stopped. The extension and the referenced
classes held by the plug-in defining the associated extension point is not
removed unless explicit removed in the stop method of the contributing activator.
Referenced classes are still invoked when the contributing extension is
executed after it is stopped.  The resources are first released when the bundle
is unresolved, as is the case if you deactivate, reset, update (build) or
refresh the plug-in.  </span></p>

<p class=MsoNormal><span lang=EN-US>This is different for OSGI services which
are by design automatically released when the client bundles stops. No special
service cleanup is needed in the activator stop method. </span></p>

<h2><a name="_Toc381643674"></a><a name=StaleReferences><span lang=EN-US>Stale
References</span></a></h2>

<p class=MsoNormal><span lang=EN-US>This topic is actually beyond the scope of
this User Guide. It is added as a reminder due to its importance when
developing bundles, and in particular when stopping and unresolving bundles.
The following paragraph is an explanation of stale references copied from the OSGi
Service Platform Release 4, Version 4.3.  </span></p>

<p class=MsoNormal><span lang=EN-US>A stale reference is a reference to a Java
object that belongs to the class loader of a bundle that is stopped or is
associated with a service object that is unregistered. Standard Java does not
provide any generic means to clean up stale references, and bundle developers
must analyze their code carefully to ensure that stale references are deleted. Stale
references are potentially harmful because they hinder the Java garbage
collector from harvesting the classes, and possibly the instances, of stopped
bundles. This may result in significantly increased memory usage and can cause
updating native code libraries to fail. Bundles using services are strongly
recommended to use either the Service Tracker or Declarative Services.</span></p>

<p class=MsoNormal><span lang=EN-US>In a development environment activated bundles
are started and stopped continuously and stale references can accumulate and as
a consequence consume an increasing amount of memory over time. As mentioned,
bundles are started and stopped according to their dependency order, so if a
bundle consumes a service from another bundle, the consumer is stopped first,
given the possibility to release the object references and services it consumes
in the stop method before the service provider is stopped releasing the
provided service(s). You can inspect the providing and requiring capabilities (possible
Java object references) and services a bundle use in the Details Page of a
bundle.  A sample use of the Service Tracker and service consumption is
illustrated in the Tutorial: <a
href="../GettingStarted/Tutorial%20Working%20with%20Multiple%20Bundles.htm">Working
with multiple Bundles</a>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

</div>

</body>

</html>
